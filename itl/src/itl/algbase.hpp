/*----------------------------------------------------------------------------+
Copyright (c) 1999-2006: Cortex Software GmbH, Kantstrasse 57, Berlin
+-----------------------------------------------------------------------------+
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
+----------------------------------------------------------------------------*/
#ifndef __ALGBASE_JOFA_000711_H__
#define __ALGBASE_JOFA_000711_H__

#include <itl/discrete.hpp>

namespace itl
{

/**
	<b>Basic algebraic properties to use with template programming</b>

	@author  Joachim Faulhaber
*/
template <class TypeTV>
class AlgBaseT
{
public:
	/** Null or empty value of a datatype.

		Neutral element of a datatype with respect to a basic operation <tt>+</tt>.
		This commonly is a null or empty value which is best associated with
		the default constructor in most cases.
	*/
	static TypeTV neutron();

	/** One-value or singleton-value a datatype. 

		Neutral element of a datatype with respect to an operation <tt>*</tt>.
		This is a value that denotes 'oneness'. For many c++ classes such
		a value does not exist. We need the <tt>AlgBaseT<T>::unon()</tt> to
		denote an empty Interval independent of it's domain-type <tt>T</tt> as
		<tt>IntervalT<T>( AlgBaseT<T>::unon(), AlgBaseT<T>::neutron() )</tt>

		Using <tt>AlgBaseT<T>::unon()</tt> one can assign one-values to a
		template parameter T.

		\code
		template <class T> class A {
			void f() { T t; t = AlgBaseT<T>::unon(); -- dependent on the instance of T
			                                         -- t=1; t=1.0; t=SetT(x);
		}
		\endcode
	*/
	static TypeTV unon();

	/** Is this type atomic (built in)? <tt>(bool, char, int, etc.)</tt>

		E.g.: <tt>if(AlgBaseT<T>::isAtomic()) -- T is atomic</tt>
	*/
	static bool isAtomic();

	/** Is this type continuous ? <tt>(float, double, etc.)</tt> 

		E.g.: <tt>if(AlgBaseT<T>::isContinuous()) -- T is continuous</tt>
	*/
	static bool isContinuous();
};


template <class TypeTV>
inline TypeTV AlgBaseT<TypeTV>::neutron() { return TypeTV(); }

template<> inline float  AlgBaseT<float>::unon()  { return 1.0; }
template<> inline double AlgBaseT<double>::unon() { return 1.0; }

template <class TypeTV>
inline TypeTV AlgBaseT<TypeTV>::unon() { return succ(TypeTV()); }


template<> inline bool AlgBaseT<bool>::isAtomic () { return true; }
template<> inline bool AlgBaseT<char>::isAtomic () { return true; }

template<> inline bool AlgBaseT<short>::isAtomic () { return true; }
template<> inline bool AlgBaseT<int>::isAtomic () { return true; }
template<> inline bool AlgBaseT<long>::isAtomic() { return true; }

template<> inline bool AlgBaseT<unsigned char>::isAtomic () { return true; }
template<> inline bool AlgBaseT<unsigned short>::isAtomic () { return true; }
template<> inline bool AlgBaseT<unsigned int>::isAtomic () { return true; }
template<> inline bool AlgBaseT<unsigned long>::isAtomic() { return true; }

template<> inline bool AlgBaseT<float>::isAtomic () { return true; }
template<> inline bool AlgBaseT<double>::isAtomic() { return true; }

template<> inline bool AlgBaseT<char*>::isAtomic() { return true; }

template <class TypeTV>
inline bool AlgBaseT<TypeTV>::isAtomic() { return false; }


template<> inline bool AlgBaseT<float>::isContinuous () { return true; }
template<> inline bool AlgBaseT<double>::isContinuous() { return true; }

template <class TypeTV>
inline bool AlgBaseT<TypeTV>::isContinuous() { return false; }

} // namespace itl

#endif

