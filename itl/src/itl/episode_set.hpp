/*----------------------------------------------------------------------------+
Copyright (c) 2007-2008: Joachim Faulhaber
+-----------------------------------------------------------------------------+
Copyright (c) 1999-2006: Cortex Software GmbH, Kantstrasse 57, Berlin
+-----------------------------------------------------------------------------+
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
+----------------------------------------------------------------------------*/
#ifndef __episode_set_h_JOFA_011015_H__
#define __episode_set_h_JOFA_011015_H__

#include <string>
#include <itl/itl_set.hpp>
#include <itl/typed_episode.hpp>

namespace itl
{

	//CL absi
	//template <class ItvDomTV, class TypeDomTV>
	//class Less_TypedEpisodeATP
	//{
	//public:
	//	typedef typed_episode<ItvDomTV, TypeDomTV>* typed_episode_ptr;

	//	bool operator ()(const typed_episode_ptr& rhs, const typed_episode_ptr& lhs)const
	//	{
	//		return rhs->isLess(lhs);
	//	}
	//};

	template <typename EpisodePointer>
	class Less_TypedEpisodeATP
	{
	public:
		bool operator ()(const EpisodePointer& rhs, const EpisodePointer& lhs)const
		{
			return rhs->isLess(lhs);
		}
	};


/**    
	<b>Eine Menge von Episoden</b>

	Template-Parameter <b>ItvDomTV</b>: Domain-Typ der Episoden-Intervalle
	(z.B. Tage, Sekunden, Monate, int u.ä.). Episoden haben ja ein Intervall, das
	Anfang und Ende der Episode angibt.

	Template-Parameter <b>TypeDomTV</b>: TypeDomTV ist der Definitionsbereich (Domain)
	der Typen von Episoden, die in der Menge verwendet werden können.

	Die Episonden-Menge darf nur Episoden enthalten, die vom gleichen
	Episoden-Typ sind. Dieser Episodentyp wird durch einen Wert aus dem
	Template-Parameter TypeDomTV repräsentiert.

	JODO: Diese Eigenschaft sollte man durch eine geeignete Implementierung
	der Klasse sicherstellen. Enfällt bislang wg. Zeitmangels

	@author  Joachim Faulhaber
*/
template <class ItvDomTV, class TypeDomTV>
class episode_set : public itl::set<typed_episode<ItvDomTV, TypeDomTV>*, Less_TypedEpisodeATP > 
{
	// all elements must have the same type from TypeDomTV
public:
	typedef itl::set<typed_episode<ItvDomTV, TypeDomTV>*, Less_TypedEpisodeATP > base_type;
	typedef typename base_type::iterator iterator;
	typedef typename base_type::const_iterator const_iterator;
	
public:
	bool isMonoTyped()const;

	std::string asString(const char* sep = " ")const
	{
		const_iterator it = this->begin();
		
		if(it == this->end()) return std::string("");
		else
		{
			std::string y = (**it).asString(); it++;
			while(it != this->end()) 
			{ 
				y += sep; 
				y += (**it).asString(); 
				it++; 
			}
			return y;
		}
	}
};


//JODO Aufrufmechnismus für stl::container operator ==.verstehen. Eigener
// == operator sollte überflüssig sein. Korrektes Type-Konzept für Pointertypen etc.
template <class ItvDomTV, class TypeDomTV>
inline bool operator == (const episode_set<ItvDomTV,TypeDomTV>& lhs,
						 const episode_set<ItvDomTV,TypeDomTV>& rhs)
{
	if(lhs.size() != rhs.size())
		return false;

	typename episode_set<ItvDomTV,TypeDomTV>::const_iterator 
		lhs_ = lhs.begin(), 
		rhs_ = rhs.begin();

	while(lhs_ != lhs.end())
	{
		if(!(**lhs_ == **rhs_))
			return false;
		lhs_++; rhs_++;
	}

	return true;
}

} // namespace itl

#endif // __episode_set_h_JOFA_011015_H__


