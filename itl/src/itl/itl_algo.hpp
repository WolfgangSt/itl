/*----------------------------------------------------------------------------+
Copyright (c) 2007-2008: Joachim Faulhaber
+-----------------------------------------------------------------------------+
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
+----------------------------------------------------------------------------*/
#ifndef __itl_ALGO_H_JOFA_080210__
#define __itl_ALGO_H_JOFA_080210__

//JODO URG: unused: delete
namespace itl
{

	/** common_range(lwb, upb, x1, x2) yields the common range of two sorted
	containers x1 and x2. lwb points to the first element of x1 and x2 in
	*/
	template<class ObjectT, class ConstObjectT, class IteratorT>
	bool common_range(IteratorT& lwb, IteratorT& upb, ObjectT& x1, const ConstObjectT& x2)
	{
		// lwb and upb are iterator of x1 marking the lower and upper bound of
		// the common range of x1 and x2.
		lwb = x1.end();
		upb = x1.end();

		if(x1.empty() || x2.empty()) return false;

		IteratorT x1_fst_ = x1.begin();
		IteratorT x1_lst_ = x1.end(); x1_lst_--;

		ConstObjectT::const_iterator x2_fst_ = x2.begin();
		ConstObjectT::const_iterator x2_lst_ = x2.end(); x2_lst_--;

		ObjectT::key_compare key_less;

		if(key_less(ObjectT::key_value(x1_lst_), ConstObjectT::key_value(x2_fst_))) // {x1}   {x2}
			return false;
		if(key_less(ConstObjectT::key_value(x2_lst_), ObjectT::key_value(x1_fst_))) // {x2}   {x1} 
			return false;

		// We do have a common range
		if(key_less(ObjectT::key_value(x1_fst_), ConstObjectT::key_value(x2_fst_)))	
		{
			//       lwb!   !upb
			// x1  {        }
			//         {          } x2
			lwb = x1.lower_bound(ConstObjectT::key_value(x2_fst_));
		}
		else
		{
			//      lwb!    !upb
			//        {          } x1
			// x2 {         }
			lwb = x1_fst_;
		}

		if(key_less(ObjectT::key_value(x1_lst_), ConstObjectT::key_value(x2_lst_)))
		{
			upb = x1.end();
		}
		else
		{
			upb = x1.upper_bound(ConstObjectT::key_value(x2_lst_));		
		}

		if(!x1.contains(ObjectT::key_value(lwb)))
			printf("x1={%s} x2={%s} lwb=%s", x1.asString().c_str(), x2.asString().c_str(), ReprBaseT::toString(key_value(lwb)));
		if(!x2.contains(ConstObjectT::key_value(lwb)))
			printf("x1={%s} x2={%s} lwb=%s", x1.asString().c_str(), x2.asString().c_str(), ReprBaseT::toString(key_value(lwb)));

		return true;
	}

	//JODO where to put common algorithms? namespace Collector, Ordered, Sorted, SortedObject

	template<class ObjectT>
	void inject(ObjectT& result, const ObjectT& x2)
	{
		const_FORALL(ObjectT, x2_, x2)
			result.inject(*x2_);
	}

	template<class ObjectT, class CoObjectT>
	void subtract(ObjectT& result, const CoObjectT& x2) //JODO TEST
	{
		CoObjectT::const_iterator common_lwb_;
		CoObjectT::const_iterator common_upb_;
		if(!common_range(common_lwb_, common_upb_, x2, result))
			return;

		CoObjectT::const_iterator x2_ = common_lwb_;
		ObjectT::iterator common_;

		while(x2_ != common_upb_)
			result.subtract(*x2_++);
	}

} // namespace itl

#endif



