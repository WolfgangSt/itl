/*----------------------------------------------------------------------------+
Copyright (c) 1999-2006: Cortex Software GmbH, Kantstrasse 57, Berlin
+-----------------------------------------------------------------------------+
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
+----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
    Macro definitions for useful and abstract notations e.g. iteration headers
-----------------------------------------------------------------------------*/
#ifndef  __itl_NOTATE_H_JOFA_990119__
#define  __itl_NOTATE_H_JOFA_990119__


// Iterations over stl or stl-compatible containers:
#define FORALL(type,iter,obj) for(type::iterator iter=(obj).begin(); (iter)!=(obj).end(); (iter)++)
#define const_FORALL(type,iter,obj) for(type::const_iterator iter=(obj).begin(); !((iter)==(obj).end()); (iter)++)

#define FORALL_THIS(iter) for(iterator iter=begin(); (iter)!=end(); (iter)++)
#define const_FORALL_THIS(iter) for(const_iterator iter=this->begin(); (iter)!=this->end(); (iter)++)

// Plain old array iteration (assuming memberfunction VecT::size()!)
#define FORALL_VEC(idx, vec) for(int idx=0; idx<vec.size(); idx++)

// Parallel iteration
#define const_FORALL_THIS_2(it, it2, cnt2)\
    for(const_iterator it=begin(), it2=(cnt2).begin(); (it)!=end() && (it2)!=cnt2.end(); (it)++, (it2)++)
#define const_FORALL_THIS_PARALLEL(it, it2, cnt2)\
    for(const_iterator it=begin(), it2=(cnt2).begin(); (it)!=end() && (it2)!=cnt2.end(); (it)++, (it2)++)

// Variants that requires already declared iterators
#define FOR_ALL(iter,obj) for((iter)=(obj).begin(); (iter)!=(obj).end(); (iter)++)
#define FOR_ALL_THIS(iter) for((iter)=this->begin(); (iter)!=this->end(); (iter)++)

#define FOR_ALL2(iter1,obj1, iter2,obj2)\
    for((iter1)=(obj1).begin(), (iter2)=(obj2).begin(); (iter1)!=(obj1).end(); ++(iter1),++(iter2))

// for readability and ease of memory: pair selectors for different contexts
#define ITERATOR        first        // x.insert(y).second
#define WAS_SUCCESSFUL    second

#define KEY_VALUE        first        // for map valuePairs
#define CONT_VALUE        second

// universal and maths
namespace itl 
{
    const int UNDEFINED_INDEX = -1;
}


#endif // __itl_NOTATE_H_JOFA_990119__


