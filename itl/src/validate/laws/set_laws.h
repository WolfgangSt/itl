/*----------------------------------------------------------------------------+
Copyright (c) 2007-2008: Joachim Faulhaber
+-----------------------------------------------------------------------------+
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
+----------------------------------------------------------------------------*/
#ifndef __itl_set_laws_h_JOFA_071124__
#define __itl_set_laws_h_JOFA_071124__

#include <itl/ctxreprbase.hpp>
#include <itl/type_traits.hpp> //JODO ReprBase and/or type_traits
#include <validate/law.h>
#include <itl/functors.hpp>

namespace itl
{

    template <typename Type>
    class InplaceUnionInvertability : public LawBase<LOKI_TYPELIST_1(Type), LOKI_TYPELIST_2(Type,Type)>
    {
        /** a - a == 0
        computed using inplace operators +=
        Input  = (a := inVal1, b := inVal2)
        Output = (lhs_result, rhs_result)
        */

    public:
        std::string name()const { return "InplaceUnionInvertability"; }
        std::string formula()const { return "a -= a; a == 0"; }

        std::string typeString()const
        {
            return "UnionInvertability<"+TypeAsString<Type>::it()+">";
        }

    public:

        bool holds()
        {
            Type lhs = this->template getInputValue<operand_a>();
            lhs -= this->template getInputValue<operand_a>();

            Type rhs = Type();

            this->template setOutputValue<lhs_result>(lhs);
            this->template setOutputValue<rhs_result>(rhs);

            return lhs == rhs;
        }

        size_t size()const { return value_size<Type>::get(this->template getInputValue<operand_a>()); }
    };

    // ---------------------------------------------------------------------------
    template <typename Type, template<class>class Operator1 = InplacePlus, template<class>class Operator2 = InplaceStar>
    class InplaceDistributivity : public LawBase<LOKI_TYPELIST_3(Type,Type,Type), LOKI_TYPELIST_2(Type,Type)>
    {
        /** a + (b * c) == (a + b) * (a + c)
        computed using inplace operators +=, += and *=
        Input  = (a := inVal1, b := inVal2, c := inVal3)
        Output = (lhs_result, rhs_result)
        */
    public:
        std::string name()const { return "InplaceDistributivity"; }
        std::string formula()const { return "a + (b * c) == (a + b) * (a + c) 'inplace'"; }

        std::string typeString()const
        {
            return "Distributivity<"+TypeAsString<Type>::it()+","
                                    +UnaryTemplateAsString<Operator1>::it()+","
                                    +UnaryTemplateAsString<Operator2>::it()+">";
        }

    public:

        bool holds()
        {
            // a + (b * c) == (a + b) * (a + c)
            // --- left hand side ------------------------
            Type b_star_c = this->template getInputValue<operand_b>();
            Operator2<Type>()(b_star_c, this->template getInputValue<operand_c>());

            // lhs := a + (b * c)
            Type lhs = this->template getInputValue<operand_a>();
            Operator1<Type>()(lhs, b_star_c);

            // --- right hand side -----------------------
            Type a_plus_b = this->template getInputValue<operand_a>();
            Operator1<Type>()(a_plus_b, this->template getInputValue<operand_b>());

            Type a_plus_c = this->template getInputValue<operand_a>();
            Operator1<Type>()(a_plus_c, this->template getInputValue<operand_c>());

            // rhs := (a + b) * (a + c)
            Type rhs = a_plus_b;
            Operator2<Type>()(rhs, a_plus_c);

            this->template setOutputValue<lhs_result>(lhs);
            this->template setOutputValue<rhs_result>(rhs);

            return lhs == rhs;
        }

        size_t size()const 
        { 
            return value_size<Type>::get(this->template getInputValue<operand_a>())+
                value_size<Type>::get(this->template getInputValue<operand_b>())+
                value_size<Type>::get(this->template getInputValue<operand_c>());
        }
    };

    // ---------------------------------------------------------------------------
    template <typename Type, template<class>class Operator1 = InplacePlus, 
                             template<class>class Operator2 = InplaceStar, 
                             template<class>class Equality = itl::std_equal>
    class InplaceDeMorgan : public LawBase<LOKI_TYPELIST_3(Type,Type,Type), LOKI_TYPELIST_2(Type,Type)>
    {
        /** a - (b + c) == (a - b) * (a - c)
        computed using inplace operators +=, += and *=
        Input  = (a := inVal1, b := inVal2, c := inVal3)
        Output = (lhs_result, rhs_result)
        */
    public:
        std::string name()const { return "InplacePlusDeMorgan"; }
        std::string formula()const { return "a - (b + c) == (a - b) * (a - c) 'inplace'"; }

        std::string typeString()const
        {
            return "DeMorgan<"+TypeAsString<Type>::it()+","
                              +UnaryTemplateAsString<Operator1>::it()+","
                              +UnaryTemplateAsString<Operator2>::it()+","
                              +UnaryTemplateAsString<Equality>::it()+">";
        }

    public:

        bool holds()
        {
            // a - (b + c) == (a - b) * (a - c)
            // --- left hand side ------------------------
            Type b_plus_c = this->template getInputValue<operand_b>();
            Operator1<Type>()(b_plus_c, this->template getInputValue<operand_c>());

            // lhs := a - (b + c)
            Type lhs = this->template getInputValue<operand_a>();
            lhs -= b_plus_c;

            // --- right hand side -----------------------
            Type a_minus_b = this->template getInputValue<operand_a>();
            a_minus_b -= this->template getInputValue<operand_b>();

            Type a_minus_c = this->template getInputValue<operand_a>();
            a_minus_c -= this->template getInputValue<operand_c>();

            // rhs := (a - b) * (a - c)
            Type rhs = a_minus_b;
            Operator2<Type>()(rhs, a_minus_c);

            this->template setOutputValue<lhs_result>(lhs);
            this->template setOutputValue<rhs_result>(rhs);

            return Equality<Type>()(lhs, rhs);
        }

        size_t size()const 
        { 
            return 
                value_size<Type>::get(this->template getInputValue<operand_a>())+
                value_size<Type>::get(this->template getInputValue<operand_b>())+
                value_size<Type>::get(this->template getInputValue<operand_c>());
        }
    };

    // ---------------------------------------------------------------------------
    template <typename Type, template<class>class Operator1 = InplacePlus, template<class>class Operator2 = InplaceMinus>
    class InplaceRightDistributivity : public LawBase<LOKI_TYPELIST_3(Type,Type,Type), LOKI_TYPELIST_2(Type,Type)>
    {
        /** (a + b) - c == (a - c) + (b - c)
        computed using inplace operators +=, += and *=
        Input  = (a := inVal1, b := inVal2, c := inVal3)
        Output = (lhs_result, rhs_result)
        */
    public:
        std::string name()const { return "InplaceRightDistributivity"; }
        std::string formula()const { return "(a + b) - c == (a - c) + (b - c) 'inplace'"; }

        std::string typeString()const
        {
            return "RightDistributivity<"+TypeAsString<Type>::it()+","
                                         +UnaryTemplateAsString<Operator1>::it()+","
                                         +UnaryTemplateAsString<Operator2>::it()+">";
        }

    public:

        size_t size()const 
        { 
            return 
                value_size<Type>::get(this->template getInputValue<operand_a>())+
                value_size<Type>::get(this->template getInputValue<operand_b>())+
                value_size<Type>::get(this->template getInputValue<operand_c>());
        }

        bool holds()
        {
            // (a + b) - c == (a - c) + (b - c)
            // --- left hand side ------------------------
            // lhs := (a + b) - c
            Type lhs = this->template getInputValue<operand_a>();
            Operator1<Type>()(lhs, this->template getInputValue<operand_b>());
            Operator2<Type>()(lhs, this->template getInputValue<operand_c>());

            // --- right hand side -----------------------
            Type a_minus_c = this->template getInputValue<operand_a>();
            Operator2<Type>()(a_minus_c, this->template getInputValue<operand_c>());

            Type b_minus_c = this->template getInputValue<operand_b>();
            Operator2<Type>()(b_minus_c, this->template getInputValue<operand_c>());

            // rhs := (a - c) + (b - c)
            Type rhs = a_minus_c;
            Operator1<Type>()(rhs, b_minus_c);

            this->template setOutputValue<lhs_result>(lhs);
            this->template setOutputValue<rhs_result>(rhs);

            return lhs == rhs;
        }
    };

    // ---------------------------------------------------------------------------
    template <typename Type>
    class InplaceSymmetricDifference : public LawBase<LOKI_TYPELIST_2(Type,Type), LOKI_TYPELIST_2(Type,Type)>
    {
        /** (a + b) - (a * b) == (a - b) + (b - a)
        computed using inplace operators +=, += and *=
        Input  = (a := inVal1, b := inVal2)
        Output = (lhs_result, rhs_result)
        */
    public:
        std::string name()const { return "Inplace Symmetric Difference"; }
        std::string formula()const { return "(a+b) - (a*b) == (a-b) + (b-a) 'inplace'"; }

        std::string typeString()const
        {
            return "SymmetricDifference<"+TypeAsString<Type>::it()+">";
        }

    public:

        bool holds()
        {
            // --- left hand side ------------------------
            Type a_plus_b = this->template getInputValue<operand_a>();
            a_plus_b += this->template getInputValue<operand_b>();

            Type a_sec_b = this->template getInputValue<operand_a>();
            a_sec_b *= this->template getInputValue<operand_b>();

            Type lhs = a_plus_b;
            lhs -= a_sec_b;

            // --- right hand side -----------------------
            Type a_minus_b = this->template getInputValue<operand_a>();
            a_minus_b -= this->template getInputValue<operand_b>();

            Type b_minus_a = this->template getInputValue<operand_b>();
            b_minus_a -= this->template getInputValue<operand_a>();

            Type rhs = a_minus_b;
            rhs += b_minus_a;

            this->template setOutputValue<lhs_result>(lhs);
            this->template setOutputValue<rhs_result>(rhs);

            return lhs == rhs;
        }

        bool debug_holds()
        {
            // --- left hand side ------------------------
            Type a_plus_b = this->template getInputValue<operand_a>();
            a_plus_b += this->template getInputValue<operand_b>();

            std::cout << "a_plus_b=" << a_plus_b.asString() << std::endl;

            Type a_sec_b = this->template getInputValue<operand_a>();
            a_sec_b *= this->template getInputValue<operand_b>();

            std::cout << "a_sec_b=" << a_sec_b.asString() << std::endl;

            Type lhs = a_plus_b;
            lhs -= a_sec_b;

            std::cout << "lhs=" << lhs.asString() << std::endl;

            // --- right hand side -----------------------
            Type a_minus_b = this->template getInputValue<operand_a>();
            a_minus_b -= this->template getInputValue<operand_b>();
            std::cout << "a_minus_b=" << a_minus_b.asString() << std::endl;

            Type b_minus_a = this->template getInputValue<operand_b>();
            b_minus_a -= this->template getInputValue<operand_a>();
            std::cout << "b_minus_a=" << b_minus_a.asString() << std::endl;

            Type rhs = a_minus_b;
            rhs += b_minus_a;
            std::cout << "rhs=" << rhs.asString() << std::endl;

            this->template setOutputValue<lhs_result>(lhs);
            this->template setOutputValue<rhs_result>(rhs);

            return lhs == rhs;
        }

        size_t size()const 
        { 
            return 
                value_size<Type>::get(this->template getInputValue<operand_a>())+
                value_size<Type>::get(this->template getInputValue<operand_b>());
        }
    };

    // ---------------------------------------------------------------------------
    template <typename MapT>
    class SectionAbsorbtion : public LawBase<LOKI_TYPELIST_2(MapT, typename MapT::set_type), LOKI_TYPELIST_2(MapT,MapT)>
    {
        /** a - (a * b) == a - b
        computed using inplace operators -= and *=
        Input  = (a := inVal1, b := inVal2)
        Output = (lhs_result, rhs_result)
        */
    public:
        std::string name()const { return "SectionAbsorbtion"; }
        std::string formula()const { return "map a, set b: a - (a * b) == a - b 'inplace'"; }

        std::string typeString()const
        {
            return "SectionAbsorbtion<"+TypeAsString<MapT>::it()+">";
        }

    public:

        bool holds()
        {
            // a - (a * b) == a - b
            // --- left hand side ------------------------
            // lhs := a - (a * b)
            MapT a_sec_b = this->template getInputValue<operand_a>();
            a_sec_b *=  this->template getInputValue<operand_b>();
            MapT lhs =  this->template getInputValue<operand_a>();
            lhs -= a_sec_b;

            // --- right hand side -----------------------
            // rhs := a - b
            MapT rhs = this->template getInputValue<operand_a>();
            rhs -= this->template getInputValue<operand_b>();

            this->template setOutputValue<lhs_result>(lhs);
            this->template setOutputValue<rhs_result>(rhs);

            return lhs == rhs;
        }

        size_t size()const 
        { 
            return 
                value_size<MapT>::get(this->template getInputValue<operand_a>())+
                value_size<typename MapT::set_type>::get(this->template getInputValue<operand_b>());
        }
    };

} // namespace itl

#endif // __itl_set_laws_h_JOFA_071124__


